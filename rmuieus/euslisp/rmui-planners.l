#!/usr/bin/env roseus

(require :prx-utils "package://rmuieus/euslisp/prx-utils.l")

;; parameters

(defvar *device* (make-cube 120 120 120))
(defvar *device-frame-id* "rmui_link")
(defvar *prx-threshold* 500)
(defvar *prx-position-threshold* 0.1)
(defvar *motion-symbol-length* 20)
(defvar *world-frame-id* "world")

;; functions

(setq *object-contact-states* (list :released :released :bottom-contact))
(setq *motion-symbol-queue* (list nil nil))


(defun get-motion-symbols (contact-positions)
  (let* ((larm-motion-symbols
           (get-motion-symbol :larm contact-positions))
         (rarm-motion-symbols
           (get-motion-symbol :rarm contact-positions)))
    (list larm-motion-symbols rarm-motion-symbols)))


(defun get-motion-symbol (arm contact-positions)
  (let ((contact-surfaces (mapcar #'car contact-positions))
        (larm-contact-state (car *object-contact-states*))
        (rarm-contact-state (cadr *object-contact-states*))
        (floor-contact-state (caddr *object-contact-states*))
        (arm-conditions
          (cond
            ((equal arm :larm)
             '(((and (equal larm-contact-state :released)
                     (null (equal rarm-contact-state :left-contact))
                     (equal floor-contact-state :bottom-contact)
                     (find :left contact-surfaces)
                     (find :bottom contact-surfaces))
                :left-push)
               ((and (equal larm-contact-state :released)
                     (null (equal rarm-contact-state :front-contact))
                     (equal floor-contact-state :bottom-contact)
                     (find :front contact-surfaces)
                     (find :bottom contact-surfaces))
                :front-push)
               ((and (equal larm-contact-state :released)
                     (null (equal rarm-contact-state :back-contact))
                     (equal floor-contact-state :bottom-contact)
                     (find :back contact-surfaces)
                     (find :bottom contact-surfaces))
                :back-push)
               ((and (equal larm-contact-state :released)
                     (null (equal rarm-contact-state :top-contact))
                     (equal floor-contact-state :bottom-contact)
                     (find :top contact-surfaces)
                     (find :bottom contact-surfaces))
                :top-push)
               ((and (equal larm-contact-state :released)
                     (null (equal rarm-contact-state :top-left-contact))
                     (equal floor-contact-state :released)
                     (find :top-left contact-surfaces)
                     (null (find :bottom contact-surfaces)))
                :top-left-push)
               ((and (equal larm-contact-state :released)
                     (null (equal rarm-contact-state :bottom-left-contact))
                     (equal floor-contact-state :released)
                     (find :bottom-left contact-surfaces)
                     (null (find :bottom contact-surfaces)))
                :bottom-left-push)
               ((and (equal larm-contact-state :released)
                     (null (equal rarm-contact-state :front-left-contact))
                     (equal floor-contact-state :bottom-contact)
                     (find :front-left contact-surfaces)
                     (find :bottom contact-surfaces))
                :front-left-push)
               ((and (equal larm-contact-state :released)
                     (null (equal rarm-contact-state :back-left-contact))
                     (equal floor-contact-state :bottom-contact)
                     (find :back-left contact-surfaces)
                     (find :bottom contact-surfaces))
                :back-left-push)
               ((or (and (equal larm-contact-state :left-contact)
                         (equal floor-contact-state :bottom-contact)
                         (null (or (find :left contact-surfaces)
                                   (find :top-left contact-surfaces)
                                   (find :bottom-left contact-surfaces)
                                   (find :front-left contact-surfaces)
                                   (find :back-left contact-surfaces)))
                         (find :bottom contact-surfaces))
                    (and (equal larm-contact-state :front-contact)
                         (equal floor-contact-state :bottom-contact)
                         (null (or (find :front contact-surfaces)
                                   (find :front-left contact-surfaces)
                                   (find :front-right contact-surfaces)
                                   (find :top-front contact-surfaces)
                                   (find :bottom-front contact-surfaces)))
                         (find :bottom contact-surfaces))
                    (and (equal larm-contact-state :back-contact)
                         (equal floor-contact-state :bottom-contact)
                         (null (or (find :back contact-surfaces)
                                   (find :back-left contact-surfaces)
                                   (find :back-right contact-surfaces)
                                   (find :top-back contact-surfaces)
                                   (find :bottom-back contact-surfaces)))
                         (find :bottom contact-surfaces))
                    (and (equal larm-contact-state :top-contact)
                         (equal floor-contact-state :bottom-contact)
                         (null (or (find :top contact-surfaces)
                                   (find :top-left contact-surfaces)
                                   (find :top-right contact-surfaces)
                                   (find :top-front contact-surfaces)
                                   (find :top-back contact-surfaces)))
                         (find :bottom contact-surfaces))
                    (and (equal larm-contact-state :top-left-contact)
                         (equal floor-contact-state :released)
                         (null (or (find :top-left contact-surfaces)
                                   (find :top contact-surfaces)
                                   (find :left contact-surfaces))))
                    (and (equal larm-contact-state :bottom-left-contact)
                         (equal floor-contact-state :released)
                         (null (or (find :bottom-left contact-surfaces)
                                   (find :bottom contact-surfaces)
                                   (find :left contact-surfaces))))
                    (and (equal larm-contact-state :front-left-contact)
                         (equal floor-contact-state :bottom-contact)
                         (null (or (find :front-left contact-surfaces)
                                   (find :left contact-surfaces)
                                   (find :front contact-surfaces)))
                         (find :bottom contact-surfaces))
                    (and (equal larm-contact-state :back-left-contact)
                         (equal floor-contact-state :bottom-contact)
                         (null (or (find :back-left contact-surfaces)
                                   (find :left contact-surfaces)
                                   (find :back contact-surfaces)))
                         (find :bottom contact-surfaces)))
                :push-release)))
            ((equal arm :rarm)
             '(((and (equal rarm-contact-state :released)
                     (null (equal larm-contact-state :right-contact))
                     (equal floor-contact-state :bottom-contact)
                     (find :right contact-surfaces)
                     (find :bottom contact-surfaces))
                :right-push)
               ((and (equal rarm-contact-state :released)
                     (null (equal larm-contact-state :front-contact))
                     (equal floor-contact-state :bottom-contact)
                     (find :front contact-surfaces)
                     (find :bottom contact-surfaces))
                :front-push)
               ((and (equal rarm-contact-state :released)
                     (null (equal larm-contact-state :back-contact))
                     (equal floor-contact-state :bottom-contact)
                     (find :back contact-surfaces)
                     (find :bottom contact-surfaces))
                :back-push)
               ((and (equal rarm-contact-state :released)
                     (null (equal larm-contact-state :top-contact))
                     (equal floor-contact-state :bottom-contact)
                     (find :top contact-surfaces)
                     (find :bottom contact-surfaces))
                :top-push)
               ((and (equal rarm-contact-state :released)
                     (null (equal larm-contact-state :front-right-contact))
                     (equal floor-contact-state :bottom-contact)
                     (find :front-right contact-surfaces)
                     (find :bottom contact-surfaces))
                :front-right-push)
               ((and (equal rarm-contact-state :released)
                     (null (equal larm-contact-state :back-right-contact))
                     (equal floor-contact-state :bottom-contact)
                     (find :back-right contact-surfaces)
                     (find :bottom contact-surfaces))
                :back-right-push)
               ((and (equal rarm-contact-state :released)
                     (null (equal larm-contact-state :top-right-contact))
                     (equal floor-contact-state :released)
                     (find :top-right contact-surfaces)
                     (null (find :bottom contact-surfaces)))
                :top-right-push)
               ((and (equal rarm-contact-state :released)
                     (null (equal larm-contact-state :bottom-right-contact))
                     (equal floor-contact-state :released)
                     (find :bottom-right contact-surfaces)
                     (null (find :bottom contact-surfaces)))
                :bottom-right-push)
               ((or (and (equal rarm-contact-state :right-contact)
                         (equal floor-contact-state :bottom-contact)
                         (null (or (find :right contact-surfaces)
                                   (find :top-right contact-surfaces)
                                   (find :bottom-right contact-surfaces)
                                   (find :front-right contact-surfaces)
                                   (find :back-right contact-surfaces)))
                         (find :bottom contact-surfaces))
                    (and (equal rarm-contact-state :front-contact)
                         (equal floor-contact-state :bottom-contact)
                         (null (or (find :front contact-surfaces)
                                   (find :front-left contact-surfaces)
                                   (find :front-right contact-surfaces)
                                   (find :top-front contact-surfaces)
                                   (find :bottom-front contact-surfaces)))
                         (find :bottom contact-surfaces))
                    (and (equal rarm-contact-state :back-contact)
                         (equal floor-contact-state :bottom-contact)
                         (null (or (find :back contact-surfaces)
                                   (find :back-left contact-surfaces)
                                   (find :back-right contact-surfaces)
                                   (find :top-back contact-surfaces)
                                   (find :bottom-back contact-surfaces)))
                         (find :bottom contact-surfaces))
                    (and (equal rarm-contact-state :top-contact)
                         (equal floor-contact-state :bottom-contact)
                         (null (or (find :top contact-surfaces)
                                   (find :top-left contact-surfaces)
                                   (find :top-right contact-surfaces)
                                   (find :top-front contact-surfaces)
                                   (find :top-back contact-surfaces)))
                         (find :bottom contact-surfaces))
                    (and (equal rarm-contact-state :top-right-contact)
                         (equal floor-contact-state :released)
                         (null (or (find :top-right contact-surfaces)
                                   (find :top contact-surfaces)
                                   (find :right contact-surfaces))))
                    (and (equal rarm-contact-state :bottom-right-contact)
                         (equal floor-contact-state :released)
                         (null (or (find :bottom-right contact-surfaces)
                                   (find :bottom contact-surfaces)
                                   (find :right contact-surfaces))))
                    (and (equal rarm-contact-state :front-right-contact)
                         (equal floor-contact-state :bottom-contact)
                         (null (or (find :front-right contact-surfaces)
                                   (find :right contact-surfaces)
                                   (find :front contact-surfaces)))
                         (find :bottom contact-surfaces))
                    (and (equal rarm-contact-state :back-right-contact)
                         (equal floor-contact-state :bottom-contact)
                         (null (or (find :back-right contact-surfaces)
                                   (find :right contact-surfaces)
                                   (find :back contact-surfaces)))
                         (find :bottom contact-surfaces)))
                :push-release)))
            (t nil)))
        (dualarm-conditions
          '(((and (or (and (equal larm-contact-state :front-contact)
                           (equal rarm-contact-state :back-contact))
                      (and (equal larm-contact-state :back-contact)
                           (equal rarm-contact-state :front-contact))
                      (and (equal larm-contact-state :left-contact)
                           (equal rarm-contact-state :right-contact))
                      (and (equal larm-contact-state :front-left-contact)
                           (equal rarm-contact-state :back-right-contact))
                      (and (equal larm-contact-state :back-left-contact)
                           (equal rarm-contact-state :front-right-contact)))
                  (equal floor-contact-state :bottom-contact)
                  (null (or (find :bottom contact-surfaces)
                            (find :bottom-front contact-surfaces)
                            (find :bottom-back contact-surfaces)
                            (find :bottom-left contact-surfaces)
                            (find :bottom-right contact-surfaces))))
             :push-hold-up)
            ((and (or (and (equal larm-contact-state :front-contact)
                           (equal rarm-contact-state :back-contact))
                      (and (equal larm-contact-state :back-contact)
                           (equal rarm-contact-state :front-contact))
                      (and (equal larm-contact-state :left-contact)
                           (equal rarm-contact-state :right-contact))
                      (and (equal larm-contact-state :front-left-contact)
                           (equal rarm-contact-state :back-right-contact))
                      (and (equal larm-contact-state :back-left-contact)
                           (equal rarm-contact-state :front-right-contact)))
                  (equal floor-contact-state :released)
                  (find :bottom contact-surfaces))
             :push-hold-down)
            ((or (and (equal larm-contact-state :left-contact)
                      (equal rarm-contact-state :right-contact)
                      (equal floor-contact-state :bottom-contact)
                      (find :bottom-right contact-surfaces)
                      (find :top-left contact-surfaces)
                      (null (find :bottom contact-surfaces)))
                 (and (equal larm-contact-state :bottom-left-contact)
                      (equal rarm-contact-state :top-right-contact)
                      (equal floor-contact-state :released)
                      (find :left contact-surfaces)
                      (find :right contact-surfaces)
                      (find :bottom contact-surfaces)))
             :push-rotate-ccw-x45)
            ((or (and (equal larm-contact-state :left-contact)
                      (equal rarm-contact-state :right-contact)
                      (equal floor-contact-state :bottom-contact)
                      (find :bottom-left contact-surfaces)
                      (find :top-right contact-surfaces)
                      (null (find :bottom contact-surfaces)))
                 (and (equal larm-contact-state :top-left-contact)
                      (equal rarm-contact-state :bottom-right-contact)
                      (equal floor-contact-state :released)
                      (find :left contact-surfaces)
                      (find :right contact-surfaces)
                      (find :bottom contact-surfaces)))
             :push-rotate-cw-x45)
            ((or (and (equal larm-contact-state :left-contact)
                      (equal rarm-contact-state :right-contact)
                      (equal floor-contact-state :bottom-contact)
                      (find :front-right contact-surfaces)
                      (find :back-left contact-surfaces)
                      (find :bottom contact-surfaces))
                 (and (equal larm-contact-state :front-left-contact)
                      (equal rarm-contact-state :back-right-contact)
                      (equal floor-contact-state :bottom-contact)
                      (find :left contact-surfaces)
                      (find :right contact-surfaces)
                      (find :bottom contact-surfaces)))
             :push-rotate-ccw-z45)
            ((or (and (equal larm-contact-state :left-contact)
                      (equal rarm-contact-state :right-contact)
                      (equal floor-contact-state :bottom-contact)
                      (find :front-left contact-surfaces)
                      (find :back-right contact-surfaces)
                      (find :bottom contact-surfaces))
                 (and (equal larm-contact-state :back-left-contact)
                      (equal rarm-contact-state :front-right-contact)
                      (equal floor-contact-state :bottom-contact)
                      (find :left contact-surfaces)
                      (find :right contact-surfaces)
                      (find :bottom contact-surfaces)))
             :push-rotate-cw-z45)
            ((or (and (equal larm-contact-state :top-left-contact)
                      (equal rarm-contact-state :top-right-contact)
                      (equal floor-contact-state :released)
                      (find :top contact-surfaces)
                      (find :right contact-surfaces)
                      (find :bottom contact-surfaces))
                 (and (equal larm-contact-state :left-contact)
                      (equal rarm-contact-state :top-contact)
                      (equal floor-contact-state :bottom-contact)
                      (find :top-left contact-surfaces)
                      (find :top-right contact-surfaces)
                      (null (find :bottom contact-surfaces))))
             :support-rotate-ccw-x45)
            ((or (and (equal larm-contact-state :top-left-contact)
                      (equal rarm-contact-state :top-right-contact)
                      (equal floor-contact-state :released)
                      (find :top contact-surfaces)
                      (find :left contact-surfaces)
                      (find :bottom contact-surfaces))
                 (and (equal larm-contact-state :top-contact)
                      (equal rarm-contact-state :right-contact)
                      (equal floor-contact-state :bottom-contact)
                      (find :top-left contact-surfaces)
                      (find :top-right contact-surfaces)
                      (null (find :bottom contact-surfaces))))
             :support-rotate-cw-x45))))
    (eval (append '(cond) arm-conditions dualarm-conditions
                  '(((null contact-positions) nil) (t nil))))))


(defun execute-motion-symbols (motion-symbols &key (move-robot t) (use-torso 0.001))
  (let ((larm-motion-symbol-queue (car *motion-symbol-queue*))
        (rarm-motion-symbol-queue (cadr *motion-symbol-queue*))
        (larm-motion-symbol (car motion-symbols))
        (rarm-motion-symbol (cadr motion-symbols))
        (larm-contact-state (car *object-contact-states*))
        (rarm-contact-state (cadr *object-contact-states*))
        (floor-contact-state (caddr *object-contact-states*))
        larm-execute-p rarm-execute-p)
    ;; check motion symbol queue
    (setq larm-motion-symbol-queue
          (append
            (if (>= (length larm-motion-symbol-queue) *motion-symbol-length*)
              (cdr larm-motion-symbol-queue) larm-motion-symbol-queue)
            (list larm-motion-symbol)))
    (setq rarm-motion-symbol-queue
          (append
            (if (>= (length rarm-motion-symbol-queue) *motion-symbol-length*)
              (cdr rarm-motion-symbol-queue) rarm-motion-symbol-queue)
            (list rarm-motion-symbol)))
    (setq larm-execute-p
          (and (>= (length larm-motion-symbol-queue) *motion-symbol-length*)
               (every #'(lambda (x) (equal x larm-motion-symbol)) larm-motion-symbol-queue)))
    (setq rarm-execute-p
          (and (>= (length rarm-motion-symbol-queue) *motion-symbol-length*)
               (every #'(lambda (x) (equal x rarm-motion-symbol)) rarm-motion-symbol-queue)))
    (setq larm-motion-symbol (if larm-execute-p larm-motion-symbol))
    (setq rarm-motion-symbol (if rarm-execute-p rarm-motion-symbol))
    (setq *motion-symbol-queue* (list larm-motion-symbol-queue rarm-motion-symbol-queue))

    ;; execute motion symbols
    (if (or larm-motion-symbol rarm-motion-symbol)
      (progn
        (if (equal larm-motion-symbol rarm-motion-symbol)
          (cond
            ((and (equal larm-motion-symbol :push-hold-up)
                  (equal rarm-motion-symbol :push-hold-up))
             (assoc-cube :arms)
             (hold-lift-up-motion :lift-height 200 :move-robot move-robot :use-torso use-torso)
             (dissoc-cube :arms)
             (return-from execute-motion-symbols (list larm-motion-symbol rarm-motion-symbol)))
            ((and (equal larm-motion-symbol :push-hold-down)
                  (equal rarm-motion-symbol :push-hold-down))
             (assoc-cube :arms)
             (hold-lift-down-motion :move-robot move-robot :use-torso use-torso)
             (dissoc-cube :arms)
             (return-from execute-motion-symbols (list larm-motion-symbol rarm-motion-symbol)))
            ;; push rotate ccw x45
            ((and (equal larm-motion-symbol :push-rotate-ccw-x45)
                  (equal rarm-motion-symbol :push-rotate-ccw-x45))
             (assoc-cube :arms)
             (let* ((initial-rotate-angle
                      (if (and (equal larm-contact-state :bottom-left-contact)
                               (equal rarm-contact-state :top-right-contact))
                        (/ -pi 4.0) 0))
                    (cube-rpy (float-vector 0 0 initial-rotate-angle))
                    (cube-height (get-cube-height :cube-rpy cube-rpy))
                    (cube-width (get-cube-width :cube-rpy cube-rpy))
                    (cube-depth (get-cube-depth :cube-rpy cube-rpy)))
               (push-rotate-motion :rotate-angle (/ pi 4.0) :rotate-axis :x
                                   :initial-rotate-angle initial-rotate-angle
                                   :cube-height cube-height
                                   :cube-width cube-width
                                   :cube-depth cube-depth
                                   :move-robot move-robot
                                   :use-torso use-torso))
             (dissoc-cube :arms)
             (return-from execute-motion-symbols (list larm-motion-symbol rarm-motion-symbol)))
            ;; push rotate cw x45
            ((and (equal larm-motion-symbol :push-rotate-cw-x45)
                  (equal rarm-motion-symbol :push-rotate-cw-x45))
             (assoc-cube :arms)
             (let* ((initial-rotate-angle
                      (if (and (equal larm-contact-state :top-left-contact)
                               (equal rarm-contact-state :bottom-right-contact))
                        (/ pi 4.0) 0))
                    (cube-rpy (float-vector 0 0 initial-rotate-angle))
                    (cube-height (get-cube-height :cube-rpy cube-rpy))
                    (cube-width (get-cube-width :cube-rpy cube-rpy))
                    (cube-depth (get-cube-depth :cube-rpy cube-rpy)))
               (push-rotate-motion :rotate-angle (/ -pi 4.0) :rotate-axis :x
                                   :initial-rotate-angle initial-rotate-angle
                                   :cube-height cube-height
                                   :cube-width cube-width
                                   :cube-depth cube-depth
                                   :move-robot move-robot
                                   :use-torso use-torso))
             (dissoc-cube :arms)
             (return-from execute-motion-symbols (list larm-motion-symbol rarm-motion-symbol)))
            ;; push rotate ccw z45
            ((and (equal larm-motion-symbol :push-rotate-ccw-z45)
                  (equal rarm-motion-symbol :push-rotate-ccw-z45))
             (assoc-cube :arms)
             (push-rotate-motion :rotate-angle (/ pi 4.0) :rotate-axis :z
                                 :move-robot move-robot :use-torso use-torso)
             (dissoc-cube :arms)
             (return-from execute-motion-symbols (list larm-motion-symbol rarm-motion-symbol)))
            ;; push rotate cw z45
            ((and (equal larm-motion-symbol :push-rotate-cw-z45)
                  (equal rarm-motion-symbol :push-rotate-cw-z45))
             (assoc-cube :arms)
             (push-rotate-motion :rotate-angle (/ -pi 4.0) :rotate-axis :z
                                 :move-robot move-robot :use-torso use-torso)
             (dissoc-cube :arms)
             (return-from execute-motion-symbols (list larm-motion-symbol rarm-motion-symbol)))
            ((and (equal larm-motion-symbol :support-rotate-ccw-x45)
                  (equal rarm-motion-symbol :support-rotate-ccw-x45))
             (assoc-cube :arms)
             (let* ((initial-rotate-angle
                      (if (and (equal larm-contact-state :top-left-contact)
                               (equal rarm-contact-state :top-right-contact))
                        (/ pi 4.0) 0))
                    (cube-rpy (float-vector 0 0 initial-rotate-angle))
                    (cube-height (get-cube-height :cube-rpy cube-rpy))
                    (cube-width (get-cube-width :cube-rpy cube-rpy))
                    (cube-depth (get-cube-depth :cube-rpy cube-rpy)))
               (support-rotate-motion :rotate-angle (/ pi 4.0) :rotate-axis :x
                                      :initial-rotate-angle initial-rotate-angle
                                      :cube-height cube-height
                                      :cube-width cube-width
                                      :cube-depth cube-depth
                                      :move-robot move-robot
                                      :use-torso use-torso))
             (dissoc-cube :arms)
             (return-from execute-motion-symbols (list larm-motion-symbol rarm-motion-symbol)))
            ((and (equal larm-motion-symbol :support-rotate-cw-x45)
                  (equal rarm-motion-symbol :support-rotate-cw-x45))
             (assoc-cube :arms)
             (let* ((initial-rotate-angle
                      (if (and (equal larm-contact-state :top-left-contact)
                               (equal rarm-contact-state :top-right-contact))
                        (/ -pi 4.0) 0))
                    (cube-rpy (float-vector 0 0 initial-rotate-angle))
                    (cube-height (get-cube-height :cube-rpy cube-rpy))
                    (cube-width (get-cube-width :cube-rpy cube-rpy))
                    (cube-depth (get-cube-depth :cube-rpy cube-rpy)))
               (support-rotate-motion :rotate-angle (/ -pi 4.0) :rotate-axis :x
                                      :initial-rotate-angle initial-rotate-angle
                                      :cube-height cube-height
                                      :cube-width cube-width
                                      :cube-depth cube-depth
                                      :move-robot move-robot
                                      :use-torso use-torso))
             (dissoc-cube :arms)
             (return-from execute-motion-symbols (list larm-motion-symbol rarm-motion-symbol)))
            (t nil)))
        (if larm-motion-symbol
          (cond
            ((equal larm-motion-symbol :left-push)
             (push-motion :larm :move-robot move-robot :use-torso use-torso
                          :push-axes (list :y)
                          :push-positions (list :center)
                          :push-directions (list :left)
                          :approach-directions (list :back)
                          :approach-arm :larm)
             (return-from execute-motion-symbols (list larm-motion-symbol nil)))
            ((equal larm-motion-symbol :front-push)
             (push-motion :larm :move-robot move-robot :use-torso use-torso
                          :push-axes (list :x)
                          :push-positions (list :center)
                          :push-directions (list :front)
                          :approach-directions (list :left)
                          :approach-arm :larm)
             (return-from execute-motion-symbols (list larm-motion-symbol nil)))
            ((equal larm-motion-symbol :back-push)
             (push-motion :larm :move-robot move-robot :use-torso use-torso
                          :push-axes (list :x)
                          :push-positions (list :center)
                          :push-directions (list :back)
                          :approach-directions (list :left)
                          :approach-arm :larm)
             (return-from execute-motion-symbols (list larm-motion-symbol nil)))
            ((equal larm-motion-symbol :top-push)
             (push-motion :larm :move-robot move-robot :use-torso use-torso
                          :push-axes (list :z)
                          :push-positions (list :center)
                          :push-directions (list :top)
                          :approach-directions (list :left)
                          :approach-arm :larm)
             (return-from execute-motion-symbols (list larm-motion-symbol nil)))
            ((equal larm-motion-symbol :top-left-push)
             (let* ((cube-rpy (float-vector 0 0 (/ pi 4.0)))
                    (cube-height (get-cube-height :cube-rpy cube-rpy))
                    (cube-width (get-cube-width :cube-rpy cube-rpy))
                    (cube-depth (get-cube-depth :cube-rpy cube-rpy)))
               (push-motion :larm :move-robot move-robot :use-torso use-torso
                            :push-axes (list :y)
                            :push-positions (list :center)
                            :push-directions (list :left)
                            :approach-directions (list :back)
                            :cube-height cube-height
                            :cube-width cube-width
                            :cube-depth cube-depth
                            :cube-rpy cube-rpy
                            :approach-arm :larm))
             (return-from execute-motion-symbols (list larm-motion-symbol nil)))
            ((equal larm-motion-symbol :bottom-left-push)
             (let* ((cube-rpy (float-vector 0 0 (/ -pi 4.0)))
                    (cube-height (get-cube-height :cube-rpy cube-rpy))
                    (cube-width (get-cube-width :cube-rpy cube-rpy))
                    (cube-depth (get-cube-depth :cube-rpy cube-rpy)))
               (push-motion :larm :move-robot move-robot :use-torso use-torso
                            :push-axes (list :y)
                            :push-positions (list :center)
                            :push-directions (list :left)
                            :approach-directions (list :back)
                            :cube-height cube-height
                            :cube-width cube-width
                            :cube-depth cube-depth
                            :cube-rpy cube-rpy
                            :approach-arm :larm))
             (return-from execute-motion-symbols (list larm-motion-symbol nil)))
            ((equal larm-motion-symbol :front-left-push)
             (let* ((cube-rpy (float-vector (/ -pi 4.0) 0 0))
                    (cube-height (get-cube-height :cube-rpy cube-rpy))
                    (cube-width (get-cube-width :cube-rpy cube-rpy))
                    (cube-depth (get-cube-depth :cube-rpy cube-rpy)))
               (push-motion :larm :move-robot move-robot :use-torso use-torso
                            :push-axes (list :y)
                            :push-positions (list :center)
                            :push-directions (list :left)
                            :approach-directions (list :back)
                            :cube-height cube-height
                            :cube-width cube-width
                            :cube-depth cube-depth
                            :cube-rpy cube-rpy
                            :approach-arm :larm))
             (return-from execute-motion-symbols (list larm-motion-symbol nil)))
            ((equal larm-motion-symbol :back-left-push)
             (let* ((cube-rpy (float-vector (/ pi 4.0) 0 0))
                    (cube-height (get-cube-height :cube-rpy cube-rpy))
                    (cube-width (get-cube-width :cube-rpy cube-rpy))
                    (cube-depth (get-cube-depth :cube-rpy cube-rpy)))
               (push-motion :larm :move-robot move-robot :use-torso use-torso
                            :push-axes (list :y)
                            :push-positions (list :center)
                            :push-directions (list :left)
                            :approach-directions (list :back)
                            :cube-height cube-height
                            :cube-width cube-width
                            :cube-depth cube-depth
                            :cube-rpy cube-rpy
                            :approach-arm :larm))
             (return-from execute-motion-symbols (list larm-motion-symbol nil)))
            ((equal larm-motion-symbol :push-release)
             (push-release-motion :larm :move-robot move-robot :use-torso use-torso)
             (reset-cube-manip-motion :larm :move-robot move-robot)
             (return-from execute-motion-symbols (list larm-motion-symbol nil)))
            (t nil)))
        (if rarm-motion-symbol
          (cond
            ((equal rarm-motion-symbol :right-push)
             (push-motion :rarm :move-robot move-robot :use-torso use-torso
                          :push-axes (list :y)
                          :push-positions (list :center)
                          :push-directions (list :right)
                          :approach-directions (list :back)
                          :approach-arm :rarm)
             (return-from execute-motion-symbols (list nil rarm-motion-symbol)))
            ((equal rarm-motion-symbol :front-push)
             (push-motion :rarm :move-robot move-robot :use-torso use-torso
                          :push-axes (list :x)
                          :push-positions (list :center)
                          :push-directions (list :front)
                          :approach-directions (list :right)
                          :approach-arm :rarm)
             (return-from execute-motion-symbols (list nil rarm-motion-symbol)))
            ((equal rarm-motion-symbol :back-push)
             (push-motion :rarm :move-robot move-robot :use-torso use-torso
                          :push-axes (list :x)
                          :push-positions (list :center)
                          :push-directions (list :back)
                          :approach-directions (list :right)
                          :approach-arm :rarm)
             (return-from execute-motion-symbols (list nil rarm-motion-symbol)))
            ((equal rarm-motion-symbol :top-push)
             (push-motion :rarm :move-robot move-robot :use-torso use-torso
                          :push-axes (list :z)
                          :push-positions (list :center)
                          :push-directions (list :top)
                          :approach-directions (list :right)
                          :approach-arm :rarm)
             (return-from execute-motion-symbols (list nil rarm-motion-symbol)))
            ((equal rarm-motion-symbol :top-right-push)
             (let* ((cube-rpy (float-vector 0 0 (/ -pi 4.0)))
                    (cube-height (get-cube-height :cube-rpy cube-rpy))
                    (cube-width (get-cube-width :cube-rpy cube-rpy))
                    (cube-depth (get-cube-depth :cube-rpy cube-rpy)))
               (push-motion :rarm :move-robot move-robot :use-torso use-torso
                            :push-axes (list :y)
                            :push-positions (list :center)
                            :push-directions (list :right)
                            :approach-directions (list :back)
                            :cube-height cube-height
                            :cube-width cube-width
                            :cube-depth cube-depth
                            :cube-rpy cube-rpy
                            :approach-arm :rarm))
             (return-from execute-motion-symbols (list nil rarm-motion-symbol)))
            ((equal rarm-motion-symbol :bottom-right-push)
             (let* ((cube-rpy (float-vector 0 0 (/ pi 4.0)))
                    (cube-height (get-cube-height :cube-rpy cube-rpy))
                    (cube-width (get-cube-width :cube-rpy cube-rpy))
                    (cube-depth (get-cube-depth :cube-rpy cube-rpy)))
               (push-motion :rarm :move-robot move-robot :use-torso use-torso
                            :push-axes (list :y)
                            :push-positions (list :center)
                            :push-directions (list :right)
                            :approach-directions (list :back)
                            :cube-height cube-height
                            :cube-width cube-width
                            :cube-depth cube-depth
                            :cube-rpy cube-rpy
                            :approach-arm :rarm))
             (return-from execute-motion-symbols (list nil rarm-motion-symbol)))
            ((equal rarm-motion-symbol :front-right-push)
             (let* ((cube-rpy (float-vector (/ pi 4.0) 0 0))
                    (cube-height (get-cube-height :cube-rpy cube-rpy))
                    (cube-width (get-cube-width :cube-rpy cube-rpy))
                    (cube-depth (get-cube-depth :cube-rpy cube-rpy)))
               (push-motion :rarm :move-robot move-robot :use-torso use-torso
                            :push-axes (list :y)
                            :push-positions (list :center)
                            :push-directions (list :right)
                            :approach-directions (list :back)
                            :cube-height cube-height
                            :cube-width cube-width
                            :cube-depth cube-depth
                            :cube-rpy cube-rpy
                            :approach-arm :rarm))
             (return-from execute-motion-symbols (list nil rarm-motion-symbol)))
            ((equal rarm-motion-symbol :back-right-push)
             (let* ((cube-rpy (float-vector (/ -pi 4.0) 0 0))
                    (cube-height (get-cube-height :cube-rpy cube-rpy))
                    (cube-width (get-cube-width :cube-rpy cube-rpy))
                    (cube-depth (get-cube-depth :cube-rpy cube-rpy)))
               (push-motion :rarm :move-robot move-robot :use-torso use-torso
                            :push-axes (list :y)
                            :push-positions (list :center)
                            :push-directions (list :right)
                            :approach-directions (list :back)
                            :cube-height cube-height
                            :cube-width cube-width
                            :cube-depth cube-depth
                            :cube-rpy cube-rpy
                            :approach-arm :rarm))
             (return-from execute-motion-symbols (list nil rarm-motion-symbol)))
            ((equal rarm-motion-symbol :push-release)
             (push-release-motion :rarm :move-robot move-robot :use-torso use-torso)
             (reset-cube-manip-motion :rarm :move-robot move-robot)
             (return-from execute-motion-symbols (list nil rarm-motion-symbol)))
            (t nil)))))))


(defun update-object-contact-state (motion-symbols)
  (unless motion-symbols (return-from update-object-contact-state nil))
  (let ((larm-motion-symbol (car motion-symbols))
        (rarm-motion-symbol (cadr motion-symbols))
        (larm-contact-state (car *object-contact-states*))
        (rarm-contact-state (cadr *object-contact-states*))
        (floor-contact-state (caddr *object-contact-states*)))
    (setq larm-contact-state
        (cond
          ((or (and (equal larm-motion-symbol :left-push)
                    (equal larm-contact-state :released))
               (and (equal larm-motion-symbol :push-rotate-ccw-x45)
                    (equal larm-contact-state :bottom-left-contact))
               (and (equal larm-motion-symbol :push-rotate-cw-x45)
                    (equal larm-contact-state :top-left-contact))
               (and (equal larm-motion-symbol :push-rotate-ccw-z45)
                    (equal larm-contact-state :front-left-contact))
               (and (equal larm-motion-symbol :push-rotate-cw-z45)
                    (equal larm-contact-state :back-left-contact))
               (and (equal larm-motion-symbol :support-rotate-cw-x45)
                    (equal larm-contact-state :top-left-contact)))
           :left-contact)
          ((and (equal larm-motion-symbol :front-push)
                (equal larm-contact-state :released))
           :front-contact)
          ((and (equal larm-motion-symbol :back-push)
                (equal larm-contact-state :released))
           :back-contact)
          ((or (and (equal larm-motion-symbol :top-push)
                    (equal larm-contact-state :released))
               (and (equal larm-motion-symbol :support-rotate-ccw-x45)
                    (equal larm-contact-state :top-left-contact)))
           :top-contact)
          ((or (and (equal larm-motion-symbol :top-left-push)
                    (equal larm-contact-state :released))
               (and (equal larm-motion-symbol :push-rotate-ccw-x45)
                    (equal larm-contact-state :left-contact))
               (and (equal larm-motion-symbol :support-rotate-ccw-x45)
                    (equal larm-contact-state :left-contact))
               (and (equal larm-motion-symbol :support-rotate-cw-x45)
                    (equal larm-contact-state :top-contact)))
           :top-left-contact)
          ((or (and (equal larm-motion-symbol :bottom-left-push)
                    (equal larm-contact-state :released))
               (and (equal larm-motion-symbol :push-rotate-cw-x45)
                    (equal larm-contact-state :left-contact)))
           :bottom-left-contact)
          ((or (and (equal larm-motion-symbol :back-left-push)
                    (equal larm-contact-state :released))
               (and (equal larm-motion-symbol :push-rotate-ccw-z45)
                    (equal larm-contact-state :left-contact)))
           :back-left-contact)
          ((or (and (equal larm-motion-symbol :front-left-push)
                    (equal larm-contact-state :released))
               (and (equal larm-motion-symbol :push-rotate-cw-z45)
                    (equal larm-contact-state :left-contact)))
           :front-left-contact)
          ((and (equal larm-motion-symbol :push-release)
                (or (equal larm-contact-state :left-contact)
                    (equal larm-contact-state :front-contact)
                    (equal larm-contact-state :front-left-contact)
                    (equal larm-contact-state :back-contact)
                    (equal larm-contact-state :back-left-contact)
                    (equal larm-contact-state :top-contact)
                    (equal larm-contact-state :top-left-contact)
                    (equal larm-contact-state :bottom-left-contact)))
           :released)
          (t larm-contact-state)))
    (setq rarm-contact-state
        (cond
          ((or (and (equal rarm-motion-symbol :right-push)
                    (equal rarm-contact-state :released))
               (and (equal rarm-motion-symbol :push-rotate-ccw-x45)
                    (equal rarm-contact-state :top-right-contact))
               (and (equal rarm-motion-symbol :push-rotate-cw-x45)
                    (equal rarm-contact-state :bottom-right-contact))
               (and (equal rarm-motion-symbol :push-rotate-ccw-z45)
                    (equal rarm-contact-state :back-right-contact))
               (and (equal rarm-motion-symbol :push-rotate-cw-z45)
                    (equal rarm-contact-state :front-right-contact))
               (and (equal rarm-motion-symbol :support-rotate-ccw-x45)
                    (equal rarm-contact-state :top-right-contact)))
           :right-contact)
          ((and (equal rarm-motion-symbol :front-push)
                (equal rarm-contact-state :released))
           :front-contact)
          ((and (equal rarm-motion-symbol :back-push)
                (equal rarm-contact-state :released))
           :back-contact)
          ((or (and (equal rarm-motion-symbol :top-push)
                    (equal rarm-contact-state :released))
               (and (equal rarm-motion-symbol :support-rotate-cw-x45)
                    (equal rarm-contact-state :top-right-contact)))
           :top-contact)
          ((or (and (equal rarm-motion-symbol :top-right-push)
                    (equal rarm-contact-state :released))
               (and (equal rarm-motion-symbol :push-rotate-cw-x45)
                    (equal rarm-contact-state :right-contact))
               (and (equal rarm-motion-symbol :support-rotate-ccw-x45)
                    (equal rarm-contact-state :top-contact))
               (and (equal rarm-motion-symbol :support-rotate-cw-x45)
                    (equal rarm-contact-state :right-contact)))
           :top-right-contact)
          ((or (and (equal rarm-motion-symbol :bottom-right-push)
                    (equal rarm-contact-state :released))
               (and (equal rarm-motion-symbol :push-rotate-ccw-x45)
                    (equal rarm-contact-state :right-contact)))
           :bottom-right-contact)
          ((or (and (equal rarm-motion-symbol :front-right-push)
                    (equal rarm-contact-state :released))
               (and (equal rarm-motion-symbol :push-rotate-ccw-z45)
                    (equal rarm-contact-state :right-contact)))
           :front-right-contact)
          ((or (and (equal rarm-motion-symbol :back-right-push)
                    (equal rarm-contact-state :released))
               (and (equal rarm-motion-symbol :push-rotate-cw-z45)
                    (equal rarm-contact-state :right-contact)))
           :back-right-contact)
          ((and (equal rarm-motion-symbol :push-release)
                (or (equal rarm-contact-state :right-contact)
                    (equal rarm-contact-state :front-contact)
                    (equal rarm-contact-state :front-right-contact)
                    (equal rarm-contact-state :back-contact)
                    (equal rarm-contact-state :back-right-contact)
                    (equal rarm-contact-state :top-contact)
                    (equal rarm-contact-state :top-right-contact)
                    (equal rarm-contact-state :bottom-right-contact)))
           :released)
          (t rarm-contact-state)))
    (setq floor-contact-state
          (cond
            ((and (equal floor-contact-state :bottom-contact)
                  (or (and (equal larm-motion-symbol :push-hold-up)
                           (equal rarm-motion-symbol :push-hold-up))
                      (and (equal larm-motion-symbol :push-rotate-ccw-x45)
                           (equal rarm-motion-symbol :push-rotate-ccw-x45))
                      (and (equal larm-motion-symbol :push-rotate-cw-x45)
                           (equal rarm-motion-symbol :push-rotate-cw-x45))
                      (and (equal larm-motion-symbol :support-rotate-ccw-x45)
                           (equal rarm-motion-symbol :support-rotate-ccw-x45))
                      (and (equal larm-motion-symbol :support-rotate-cw-x45)
                           (equal rarm-motion-symbol :support-rotate-cw-x45))))
             :released)
            ((and (equal floor-contact-state :released)
                  (or (and (equal larm-motion-symbol :push-hold-down)
                           (equal rarm-motion-symbol :push-hold-down))
                      (and (equal larm-motion-symbol :push-rotate-ccw-x45)
                           (equal rarm-motion-symbol :push-rotate-ccw-x45))
                      (and (equal larm-motion-symbol :push-rotate-cw-x45)
                           (equal rarm-motion-symbol :push-rotate-cw-x45))
                      (and (equal larm-motion-symbol :support-rotate-ccw-x45)
                           (equal rarm-motion-symbol :support-rotate-ccw-x45))
                      (and (equal larm-motion-symbol :support-rotate-cw-x45)
                           (equal rarm-motion-symbol :support-rotate-cw-x45))))
             :bottom-contact)
            (t floor-contact-state)))
    (setq *object-contact-states*
          (list larm-contact-state rarm-contact-state floor-contact-state))))


(provide :rmui-planners "rmui-planners.l")
