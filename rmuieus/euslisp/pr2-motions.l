(require :pr2-interface "package://pr2eus/pr2-interface.l")


(defun motion-init ()
  (pr2-init)
  (send *pr2* :reset-manip-pose)
  (setq *cube* (make-cube 300 500 300))
  (send *cube* :translate #f(600 0 1000))
  (objects (list *pr2* *cube*)))


(defun dualarm-hold-push-side-up (&key (approach-direction :back)
                                    (attach-position :center))
  (when (not (or (and (eq approach-direction :back)
                      (eq attach-position :upper))
                 (and (eq approach-direction :back)
                      (eq attach-position :center))
                 (and (eq approach-direction :back)
                      (eq attach-position :lower))
                 (and (eq approach-direction :upper)
                      (eq attach-position :front))
                 (and (eq approach-direction :upper)
                      (eq attach-position :center))
                 (and (eq approach-direction :upper)
                      (eq attach-position :back))))
    (return-from dualarm-hold-push-side-up nil))
  (let ((larm-target-coords (send (send *cube* :worldcoords) :copy-worldcoords))
        (rarm-target-coords (send (send *cube* :worldcoords) :copy-worldcoords)))
    (cond
      ((eq approach-direction :back)
       (let ((z-offset (cond ((eq attach-position :center) 0.0)
                             ((eq attach-position :upper) (- (/ (z-of-cube *cube*) 2.0) 50))
                             ((eq attach-position :lower) (- 50 (/ (z-of-cube *cube*) 2.0))))))
         (send larm-target-coords :translate
               (float-vector 100 (+ (/ (y-of-cube *cube*) 2.0) 100) z-offset))
         (send larm-target-coords :rotate 1.57 :x)
         (send rarm-target-coords :translate
               (float-vector 100 (* -1.0 (+ (/ (y-of-cube *cube*) 2.0) 100)) z-offset))
         (send rarm-target-coords :rotate -1.57 :x)))
      ((eq approach-direction :upper)
       (let ((x-offset (cond ((eq attach-position :center) 0.0)
                             ((eq attach-position :front) (- (/ (x-of-cube *cube*) 2.0) 50))
                             ((eq attach-position :back) (- 50 (/ (x-of-cube *cube*) 2.0))))))
         (send larm-target-coords :translate
               (float-vector x-offset (+ (/ (y-of-cube *cube*) 2.0) 100) -100))
         (send larm-target-coords :rotate 1.57 :x)
         (send larm-target-coords :rotate -1.57 :z)
         (send rarm-target-coords :translate
               (float-vector x-offset (* -1.0 (+ (/ (y-of-cube *cube*) 2.0) 100)) -100))
         (send rarm-target-coords :rotate -1.57 :x)
         (send rarm-target-coords :rotate 1.57 :z)))
      (t nil))
    (send *pr2* :inverse-kinematics
          (list larm-target-coords rarm-target-coords)
          :rotation-axis (list t t)
          :move-target (list (send *pr2* :larm :end-coords)
                             (send *pr2* :rarm :end-coords))
          :use-torso 0.001)
    (send *irtviewer* :draw-objects)
    (send *ri* :angle-vector (send *pr2* :angle-vector) 5000)
    (send *ri* :wait-interpolation)

    (send larm-target-coords :translate (float-vector 0 0 100))
    (send rarm-target-coords :translate (float-vector 0 0 100))
    (send *pr2* :inverse-kinematics
          (list larm-target-coords rarm-target-coords)
          :rotation-axis (list t t)
          :move-target (list (send *pr2* :larm :end-coords)
                             (send *pr2* :rarm :end-coords))
          :use-torso 0.001)
    (send *irtviewer* :draw-objects)
    (send *ri* :angle-vector (send *pr2* :angle-vector) 5000)
    (send *ri* :wait-interpolation)
    (send (send *pr2* :larm :end-coords :parent) :assoc *cube*)

    (send larm-target-coords :translate (float-vector 0 0 100) :world)
    (send rarm-target-coords :translate (float-vector 0 0 100) :world)
    (send *pr2* :inverse-kinematics
          (list larm-target-coords rarm-target-coords)
          :rotation-axis (list t t)
          :move-target (list (send *pr2* :larm :end-coords)
                             (send *pr2* :rarm :end-coords))
          :use-torso 0.001)
    (send *irtviewer* :draw-objects)
    (send *ri* :angle-vector (send *pr2* :angle-vector) 5000)
    (send *ri* :wait-interpolation)))

(defun dualarm-hold-push-side-down ()
  (let ((larm-target-coords (send (send *pr2* :larm :end-coords) :copy-worldcoords))
        (rarm-target-coords (send (send *pr2* :rarm :end-coords) :copy-worldcoords)))
    (send larm-target-coords :translate (float-vector 0 0 -100) :world)
    (send rarm-target-coords :translate (float-vector 0 0 -100) :world)
    (send *pr2* :inverse-kinematics
          (list larm-target-coords rarm-target-coords)
          :rotation-axis (list t t)
          :move-target (list (send *pr2* :larm :end-coords)
                             (send *pr2* :rarm :end-coords))
          :use-torso 0.001)
    (send *irtviewer* :draw-objects)
    (send *ri* :angle-vector (send *pr2* :angle-vector) 5000)
    (send *ri* :wait-interpolation)
    (send (send *pr2* :larm :end-coords :parent) :dissoc *cube*)

    (send larm-target-coords :translate (float-vector 0 0 -100))
    (send rarm-target-coords :translate (float-vector 0 0 -100))
    (send *pr2* :inverse-kinematics
          (list larm-target-coords rarm-target-coords)
          :rotation-axis (list t t)
          :move-target (list (send *pr2* :larm :end-coords)
                             (send *pr2* :rarm :end-coords))
          :use-torso 0.0001)
    (send *irtviewer* :draw-objects)
    (send *ri* :angle-vector (send *pr2* :angle-vector) 5000)
    (send *ri* :wait-interpolation)))

(provide :pr2-motions "pr2-motions.l")
